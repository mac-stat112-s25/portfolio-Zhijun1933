{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"R Programming Cheatsheet\"\n",
        "author: \"Zhijun He\"\n",
        "format: \n",
        "  html:\n",
        "    theme: cosmo\n",
        "    toc: true\n",
        "    code-fold: false\n",
        "    page-layout: full\n",
        "    css: styles.css\n",
        "---\n",
        "\n",
        "```{css echo=FALSE}\n",
        ".columns {\n",
        "  display: flex;\n",
        "}\n",
        "\n",
        ".column {\n",
        "  flex: 1;\n",
        "  padding: 0 10px;\n",
        "}\n",
        "\n",
        "h1, h2 {\n",
        "  color: #006aa3;\n",
        "}\n",
        "\n",
        "h3 {\n",
        "  color: #0078c0;\n",
        "}\n",
        "\n",
        ".code-box {\n",
        "  background-color: #f0f0f0;\n",
        "  border: 1px solid #cccccc;\n",
        "  border-radius: 4px;\n",
        "  font-family: monospace;\n",
        "  padding: 5px;\n",
        "  font-size: 0.85em;\n",
        "  margin-bottom: 10px;\n",
        "}\n",
        "\n",
        ".box {\n",
        "  border: 1px solid #ccc;\n",
        "  padding: 10px;\n",
        "  margin-bottom: 15px;\n",
        "  border-radius: 5px;\n",
        "  background-color: #f9f9f9;\n",
        "}\n",
        "```\n",
        "\n",
        "\n",
        "## R Grammar & Basic Syntax {.box}\n",
        "\n",
        "::::: columns\n",
        "::: column\n",
        "### Variable Assignment\n",
        "\n",
        "``` r\n",
        "x <- 90  # Preferred in tidyverse\n",
        "y = 42   # Alternative syntax\n",
        "```\n",
        "\n",
        "### Basic Data Types\n",
        "\n",
        "``` r\n",
        "# Character\n",
        "text <- \"hello\"\n",
        "# Numeric\n",
        "num <- 42\n",
        "decimal <- 3.14\n",
        "# Logical\n",
        "bool <- TRUE\n",
        "# Vector\n",
        "vec <- c(1, 2, 3, 4, 5)\n",
        "# Data frame\n",
        "df <- data.frame(\n",
        "  id = 1:3,\n",
        "  name = c(\"A\", \"B\", \"C\")\n",
        ")\n",
        "```\n",
        ":::\n",
        "\n",
        "::: column\n",
        "### The Pipe Operator\n",
        "\n",
        "``` r\n",
        "# Instead of:\n",
        "result <- function3(function2(function1(df)))\n",
        "# Use:\n",
        "result <- df %>% \n",
        "  function1() %>% \n",
        "  function2() %>% \n",
        "  function3()\n",
        "```\n",
        "\n",
        "### Logical Operators\n",
        "\n",
        "`<`, `>`, `<=`, `>=`, `==`, `!=`, `&`, `|`, `!`\n",
        ":::\n",
        ":::::\n",
        "\n",
        "## Data Import & Export {.box}\n",
        "\n",
        "::::: columns\n",
        "::: column\n",
        "### File Paths\n",
        "\n",
        "``` r\n",
        "# Relative paths\n",
        "df <- read_csv(\"data.csv\")\n",
        "df <- read_csv(\"data/data.csv\")\n",
        "df <- read_csv(\"../data/data.csv\")\n",
        "# Absolute paths\n",
        "df <- read_csv(\"~/Desktop/project/data.csv\")\n",
        "```\n",
        "\n",
        "### Reading Data\n",
        "\n",
        "``` r\n",
        "# CSV files\n",
        "df <- read_csv(\"filename.csv\")\n",
        "# Excel files\n",
        "library(readxl)\n",
        "df <- read_excel(\"filename.xlsx\")\n",
        "# R Data\n",
        "load(\"filename.RData\")\n",
        "```\n",
        ":::\n",
        "\n",
        "::: column\n",
        "### Saving Data\n",
        "\n",
        "``` r\n",
        "# Save as CSV\n",
        "write_csv(df, \"filename.csv\")\n",
        "# Save as R object\n",
        "save(df, file = \"data.RData\")\n",
        "# Save plots\n",
        "ggsave(\"plot.png\", width = 8, height = 6)\n",
        "```\n",
        ":::\n",
        ":::::\n",
        "\n",
        "## Data Exploration {.box}\n",
        "\n",
        "::::: columns\n",
        "::: column\n",
        "### Initial Data Inspection\n",
        "\n",
        "``` r\n",
        "# Structure and dimensions\n",
        "str(df)\n",
        "glimpse(df)\n",
        "dim(df)\n",
        "# View first/last rows\n",
        "head(df, n = 10)\n",
        "tail(df, n = 10)\n",
        "# Summary statistics\n",
        "summary(df)\n",
        "# Missing values\n",
        "sum(is.na(df))\n",
        "colSums(is.na(df))\n",
        "```\n",
        ":::\n",
        "\n",
        "::: column\n",
        "### Basic Statistics\n",
        "\n",
        "``` r\n",
        "# Central tendency\n",
        "mean(x, na.rm = TRUE)\n",
        "median(x, na.rm = TRUE)\n",
        "# Spread\n",
        "sd(x, na.rm = TRUE)\n",
        "IQR(x, na.rm = TRUE)\n",
        "range(x, na.rm = TRUE)\n",
        "# Correlation\n",
        "cor(x, y)\n",
        "```\n",
        ":::\n",
        ":::::\n",
        "\n",
        "## Data Wrangling with dplyr {.box}\n",
        "\n",
        "::::: columns\n",
        "::: column\n",
        "### Key Verbs\n",
        "\n",
        "``` r\n",
        "# Create/modify variables\n",
        "mutate(new_var = old_var / 1000)\n",
        "# Filter rows by condition\n",
        "filter(age > 25)\n",
        "# Select columns\n",
        "select(name, age)\n",
        "# Sort rows\n",
        "arrange(age, desc(name))\n",
        "# Summarize data\n",
        "summarize(avg = mean(value, na.rm = TRUE))\n",
        "# Group data\n",
        "group_by(category)\n",
        "# Count observations\n",
        "count(category)\n",
        "```\n",
        ":::\n",
        "\n",
        "::: column\n",
        "### Missing Values\n",
        "\n",
        "``` r\n",
        "# Filter non-missing\n",
        "filter(!is.na(column))  \n",
        "# Replace missing\n",
        "mutate(col_clean = replace_na(col, \"refused\"))\n",
        "# Drop missing rows\n",
        "drop_na()\n",
        "```\n",
        "\n",
        "### Common Patterns\n",
        "\n",
        "``` r\n",
        "# Group-level statistics\n",
        "df %>% \n",
        "  group_by(category) %>%\n",
        "  summarize(\n",
        "    avg = mean(value, na.rm = TRUE),\n",
        "    count = n()\n",
        "  ) %>%\n",
        "  arrange(desc(avg))\n",
        "```\n",
        ":::\n",
        ":::::\n",
        "\n",
        "## String Manipulation {.box}\n",
        "\n",
        "``` r\n",
        "# Extract substring\n",
        "str_sub(\"macalester\", 1, 3)  # \"mac\"\n",
        "# Detect pattern\n",
        "str_detect(\"El Taco\", \"Taco\")  # TRUE\n",
        "# Get string length\n",
        "str_length(\"abc\")  # 3\n",
        "# Convert to lowercase\n",
        "str_to_lower(\"ABC\")  # \"abc\"\n",
        "# Replace pattern\n",
        "str_replace(\"Taco Taxi\", \"Taco\", \"Pizza\")\n",
        "```\n",
        "\n",
        "## Data Reshaping with tidyr {.box}\n",
        "\n",
        "::::: columns\n",
        "::: column\n",
        "### Wide to Long (pivot_longer)\n",
        "\n",
        "``` r\n",
        "# Before:\n",
        "# year_2020 year_2021 year_2022\n",
        "#    10        15        20\n",
        "# After:\n",
        "# year  value\n",
        "# 2020   10\n",
        "# 2021   15\n",
        "# 2022   20\n",
        "long_df <- pivot_longer(\n",
        "  df,\n",
        "  cols = c(year_2020, year_2021, year_2022),\n",
        "  names_to = \"year\",\n",
        "  values_to = \"value\"\n",
        ")\n",
        "```\n",
        ":::\n",
        "\n",
        "::: column\n",
        "### Long to Wide (pivot_wider)\n",
        "\n",
        "``` r\n",
        "wide_df <- pivot_wider(\n",
        "  long_df,\n",
        "  names_from = year,\n",
        "  values_from = value\n",
        ")\n",
        "```\n",
        ":::\n",
        ":::::\n",
        "\n",
        "## Joining Data {.box}\n",
        "\n",
        "::::: columns\n",
        "::: column\n",
        "### Types of Joins\n",
        "\n",
        "``` r\n",
        "# Keep matching rows\n",
        "inner_join(table1, table2, by = \"id\")\n",
        "# Keep all rows from left table\n",
        "left_join(table1, table2, by = \"id\")\n",
        "# Keep all rows from both tables\n",
        "full_join(table1, table2, by = \"id\")\n",
        "# Rows from left that match right\n",
        "semi_join(table1, table2, by = \"id\")\n",
        "# Rows from left that don't match right\n",
        "anti_join(table1, table2, by = \"id\")\n",
        "```\n",
        ":::\n",
        "\n",
        "::: column\n",
        "### Join By Multiple Columns\n",
        "\n",
        "``` r\n",
        "inner_join(table1, table2, \n",
        "           by = c(\"id1\" = \"id2\", \"name1\" = \"name2\"))\n",
        "```\n",
        ":::\n",
        ":::::\n",
        "\n",
        "## Data Visualization with ggplot2 {.box}\n",
        "\n",
        "::::: columns\n",
        "::: column\n",
        "### Grammar of Graphics\n",
        "\n",
        "ggplot2 builds plots in layers:\n",
        "\n",
        "``` r\n",
        "ggplot(data = df, mapping = aes(x, y)) +\n",
        "  geom_*() +         # geometry layer\n",
        "  scale_*() +        # scale transformations\n",
        "  labs() +           # labels\n",
        "  theme() +          # visual styling\n",
        "  facet_*()          # faceting\n",
        "```\n",
        "\n",
        "### Common Geometries\n",
        "\n",
        "``` r\n",
        "# Scatter plot\n",
        "ggplot(df, aes(x = x_var, y = y_var)) +\n",
        "  geom_point()\n",
        "\n",
        "# Line plot\n",
        "ggplot(df, aes(x = x_var, y = y_var)) +\n",
        "  geom_line()\n",
        "\n",
        "# Bar chart (counts)\n",
        "ggplot(df, aes(x = category)) +\n",
        "  geom_bar()\n",
        "\n",
        "# Bar chart (values)\n",
        "ggplot(df, aes(x = category, y = value)) +\n",
        "  geom_col()\n",
        "```\n",
        ":::\n",
        "\n",
        "::: column\n",
        "``` r\n",
        "# Histogram\n",
        "ggplot(df, aes(x = value)) +\n",
        "  geom_histogram(bins = 30)\n",
        "\n",
        "# Boxplot\n",
        "ggplot(df, aes(x = category, y = value)) +\n",
        "  geom_boxplot()\n",
        "\n",
        "# Density plot\n",
        "ggplot(df, aes(x = value)) +\n",
        "  geom_density()\n",
        "```\n",
        "\n",
        "### Adding Color\n",
        "\n",
        "``` r\n",
        "# Color points by category\n",
        "ggplot(df, aes(x = x_var, y = y_var, color = group)) +\n",
        "  geom_point()\n",
        "\n",
        "# Fill bars by category\n",
        "ggplot(df, aes(x = x_var, fill = group)) +\n",
        "  geom_bar()\n",
        "```\n",
        ":::\n",
        ":::::\n",
        "\n",
        "::::: columns\n",
        "::: column\n",
        "### Faceting\n",
        "\n",
        "``` r\n",
        "# Multiple plots by category\n",
        "ggplot(df, aes(x = x_var, y = y_var)) +\n",
        "  geom_point() +\n",
        "  facet_wrap(~ category)\n",
        "\n",
        "# Grid of plots by two variables\n",
        "ggplot(df, aes(x = x_var, y = y_var)) +\n",
        "  geom_point() +\n",
        "  facet_grid(row_var ~ col_var)\n",
        "```\n",
        ":::\n",
        "\n",
        "::: column\n",
        "### Customizing Labels & Theme\n",
        "\n",
        "``` r\n",
        "ggplot(df, aes(x = x_var, y = y_var)) +\n",
        "  geom_point() +\n",
        "  labs(\n",
        "    title = \"Main Title\",\n",
        "    subtitle = \"Subtitle here\",\n",
        "    x = \"X-axis Label\",\n",
        "    y = \"Y-axis Label\",\n",
        "    caption = \"Data source: Example\"\n",
        "  ) +\n",
        "  theme_minimal() +\n",
        "  theme(\n",
        "    plot.title = element_text(face = \"bold\", size = 16),\n",
        "    axis.title = element_text(size = 12),\n",
        "    legend.position = \"bottom\"\n",
        "  )\n",
        "```\n",
        ":::\n",
        ":::::\n",
        "\n",
        "### Color Blindness-Friendly Palettes\n",
        "\n",
        "``` r\n",
        "# Discrete variables\n",
        "scale_color_viridis_d()\n",
        "scale_fill_viridis_d()\n",
        "\n",
        "# Continuous variables\n",
        "scale_color_viridis_c()\n",
        "scale_fill_viridis_c()\n",
        "```\n",
        "\n",
        "## Spatial Visualization {.box}\n",
        "\n",
        "::::: columns\n",
        "::: column\n",
        "### Basic Maps with Leaflet\n",
        "\n",
        "``` r\n",
        "library(leaflet)\n",
        "\n",
        "# Create a map with default tiles\n",
        "leaflet() %>%\n",
        "  addTiles() %>%\n",
        "  setView(lng = -93.1, lat = 44.9, zoom = 12)\n",
        "\n",
        "# Add markers\n",
        "leaflet(spatial_df) %>%\n",
        "  addTiles() %>%\n",
        "  addMarkers(~longitude, ~latitude, \n",
        "             popup = ~paste(name, \"<br>\", details))\n",
        "```\n",
        ":::\n",
        "\n",
        "::: column\n",
        "### Choropleth Maps\n",
        "\n",
        "``` r\n",
        "library(sf)\n",
        "library(rnaturalearth)\n",
        "\n",
        "# Get country boundaries\n",
        "world <- ne_countries(scale = \"medium\", \n",
        "                      returnclass = \"sf\")\n",
        "\n",
        "# Create choropleth map\n",
        "ggplot(world) +\n",
        "  geom_sf(aes(fill = pop_est)) +\n",
        "  scale_fill_viridis_c() +\n",
        "  theme_minimal()\n",
        "```\n",
        ":::\n",
        ":::::\n",
        "\n",
        "## Complete Example Scripts {.box}\n",
        "\n",
        "### Data Analysis Example\n",
        "\n",
        "``` r\n",
        "# Load packages\n",
        "library(tidyverse)\n",
        "\n",
        "# Import data\n",
        "penguins <- read_csv(\"penguins.csv\")\n",
        "\n",
        "# Clean data\n",
        "penguins_clean <- penguins %>%\n",
        "  # Remove missing values\n",
        "  drop_na() %>%\n",
        "  # Create new variable\n",
        "  mutate(\n",
        "    body_mass_kg = body_mass_g / 1000,\n",
        "    bill_ratio = bill_length_mm / bill_depth_mm\n",
        "  ) %>%\n",
        "  # Filter rows\n",
        "  filter(species != \"Chinstrap\") %>%\n",
        "  # Select columns\n",
        "  select(species, island, body_mass_kg)\n",
        "\n",
        "# Summarize data\n",
        "penguin_summary <- penguins_clean %>%\n",
        "  group_by(species, island) %>%\n",
        "  summarize(\n",
        "    avg_mass = mean(body_mass_kg),\n",
        "    n = n()\n",
        "  ) %>%\n",
        "  arrange(desc(avg_mass))\n",
        "\n",
        "# Create visualization\n",
        "ggplot(penguins_clean, \n",
        "       aes(x = island, y = body_mass_kg, \n",
        "           fill = species)) +\n",
        "  geom_boxplot() +\n",
        "  labs(\n",
        "    title = \"Penguin Body Mass by Island\",\n",
        "    x = \"Island\",\n",
        "    y = \"Body Mass (kg)\",\n",
        "    fill = \"Species\"\n",
        "  ) +\n",
        "  scale_fill_viridis_d() +\n",
        "  theme_minimal()\n",
        "```\n",
        "\n",
        "### String Manipulation Example\n",
        "\n",
        "``` r\n",
        "# Load packages\n",
        "library(tidyverse)\n",
        "\n",
        "# Sample restaurant data\n",
        "restaurants <- tibble(\n",
        "  name = c(\"El Taco Riendo\", \"French Meadow\", \n",
        "           \"Shish\", \"Taco Taxi\"),\n",
        "  cuisine = c(\"Mexican\", \"American\", \n",
        "              \"Mediterranean\", \"Mexican\"),\n",
        "  price = c(15, 25, 18, 12)\n",
        ")\n",
        "\n",
        "# Find restaurants with \"Taco\" in the name\n",
        "taco_places <- restaurants %>%\n",
        "  filter(str_detect(name, \"Taco\"))\n",
        "\n",
        "# Extract part of restaurant names\n",
        "restaurants %>%\n",
        "  mutate(\n",
        "    short_name = str_sub(name, 1, 5),\n",
        "    name_length = str_length(name),\n",
        "    lower_name = str_to_lower(name),\n",
        "    pizza_name = str_replace(name, \"Taco\", \"Pizza\")\n",
        "  )\n",
        "```\n",
        "\n",
        "### Reshaping Example\n",
        "\n",
        "``` r\n",
        "# Race times in wide format\n",
        "race_times_wide <- tibble(\n",
        "  runner = c(\"Abiy\", \"Amy\", \"Carlos\"),\n",
        "  `2022` = c(96.6, 103.0, 88.5),\n",
        "  `2023` = c(89.1, 99.6, 85.2),\n",
        "  `2024` = c(92.3, 98.2, 82.7)\n",
        ")\n",
        "\n",
        "# Convert to long format\n",
        "race_times_long <- race_times_wide %>%\n",
        "  pivot_longer(\n",
        "    cols = -runner,\n",
        "    names_to = \"year\",\n",
        "    values_to = \"time\"\n",
        "  )\n",
        "\n",
        "# Convert back to wide format\n",
        "race_times_wide_again <- race_times_long %>%\n",
        "  pivot_wider(\n",
        "    names_from = year,\n",
        "    values_from = time\n",
        "  )\n",
        "```\n",
        "\n",
        "## RStudio Environment {.box}\n",
        "\n",
        "-   Console: Try code interactively\n",
        "-   Install packages: `install.packages(\"tidyverse\")`\n",
        "-   Load packages: `library(tidyverse)`\n",
        "-   Get help: `?function_name`, `help(function_name)`"
      ],
      "id": "434fb5b2"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}