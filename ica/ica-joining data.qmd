---
title: "Joining Data"
format: html
---

## Learning Goals

Understand how to join different datasets:

-   mutating joins: left_join(), inner_join() and full_join()
-   filtering joins: semi_join(), anti_join()

## Additional Resources

For more information about the topics covered in this chapter, refer to the resources below:

-   [Demonstration of joining data (YouTube)](https://www.youtube.com/watch?v=HwZLXX2WXKI) by Lisa Lendway
-   [Joins](https://r4ds.had.co.nz/relational-data.html#join-problems) by Wickham, Ã‡etinkaya-Rundel, & Grolemund
-   [Data wrangling on multiple tables](https://mdsr-book.github.io/mdsr2e/ch-wrangling.html#sec:join) by Baumer, Kaplan, and Horton

## 11.1 Review

Where are we? Data preparation

Thus far, we've learned how to:

-   arrange() our data in a meaningful order
-   subset the data to only filter() the rows and select() the columns of interest
-   mutate() existing variables and define new variables
-   summarize() various aspects of a variable, both overall and by group (group_by())
-   reshape our data to fit the task at hand (pivot_longer(), pivot_wider())

## 11.2 Motivation

In practice, we often have to collect and combine data from various sources in order to address our research questions. Example:

What are the best predictors of album sales? Combine: - Spotify data on individual songs (eg: popularity, genre, characteristics) - sales data on individual songs

What are the best predictors of flight delays? Combine: - data on individual flights including airline, starting airport, and destination airport - data on different airlines (eg: ticket prices, reliability, etc) - data on different airports (eg: location, reliability, etc)

### Example 1

Consider the following (made up) data on students and course enrollments:

```{r}
students_1 <- data.frame(
  student = c("A", "B", "C"),
  class = c("STAT 101", "GEOL 101", "ANTH 101")
)

# Check it out
students_1
```

```{r}
enrollments_1 <- data.frame(
  class = c("STAT 101", "ART 101", "GEOL 101"),
  enrollment = c(18, 17, 24)
)

# Check it out
enrollments_1
```

Our goal is to combine or join these datasets into one. For reference, here they are side by side:

First, consider the following:

-   What variable or key do these datasets have in common? Thus by what information can we match the observations in these datasets?

    *The common key is "class"*

-   Relative to this key, what info does students_1 have that enrollments_1 doesn't?

    *students_1 has information about which student is in which class*

-   Relative to this key, what info does enrollments_1 have that students_1 doesn't?

    *enrollments_1 has information about the total enrollment for each class*

## 11.3 Mutating Joins: left, inner, full

### Example 2

Let's learn by doing. First, try the left_join() function:

```{r}
library(tidyverse)
students_1 |> 
  left_join(enrollments_1)
```

What did this do? What are the roles of students_1 (the left table) and enrollments_1 (the right table)?

*The left_join() kept all rows from students_1 (the left table) and added the enrollment information from enrollments_1 (the right table) where there was a match on the class variable. Since "ANTH 101" doesn't exist in enrollments_1, that enrollment value is NA.*

What, if anything, would change if we reversed the order of the data tables? Think about it, then try.

```{r}
enrollments_1 |> 
  left_join(students_1)
```

*When we reverse the order, we keep all rows from enrollments_1 and add student information where there's a match. "ART 101" doesn't have any student in students_1, so the student value is NA.*

### Example 3

Next, explore how our datasets are joined using inner_join():

```{r}
students_1 |> 
  inner_join(enrollments_1)
```

What did this do? What are the roles of students_1 (the left table) and enrollments_1 (the right table)?

*The inner_join() kept only rows where there was a match between students_1 and enrollments_1 on the class variable. Only "STAT 101" and "GEOL 101" appear in both datasets, so only those rows are kept.*

What, if anything, would change if we reversed the order of the data tables? Think about it, then try.

```{r}
enrollments_1 |> 
  inner_join(students_1)
```

*The result is the same regardless of the order for inner_join() - we still get only the matching rows. The only difference is the order of the columns.*

### Example 4

Next, explore how our datasets are joined using full_join():

```{r}
students_1 |> 
  full_join(enrollments_1)
```

What did this do? What are the roles of students_1 (the left table) and enrollments_1 (the right table)?

*The full_join() kept all rows from both students_1 and enrollments_1, filling in NAs where there was no match. We get "ANTH 101" with no enrollment info and "ART 101" with no student info.*

What, if anything, would change if we reversed the order of the data tables? Think about it, then try.

```{r}
enrollments_1 |> 
  full_join(students_1)
```

*The result is the same in terms of data content for full_join() regardless of the order. Only the column order changes.*

### 11.3.1 Summary

Mutating joins add new variables (columns) to the left data table from matching observations in the right table:

left_data \|\> mutating_join(right_data)

The most common mutating joins are:

**left_join()** Keeps all observations from the left, but discards any observations in the right that do not have a match in the left.

**inner_join()** Keeps only the observations from the left with a match in the right.

**full_join()** Keeps all observations from the left and the right. (This is less common than left_join() and inner_join()).

NOTE: When an observation in the left table has multiple matches in the right table, these mutating joins produce a separate observation in the new table for each match.

## 11.4 Filtering Joins: semi, anti

Mutating joins combine information, thus increase the number of columns in a dataset (like mutate()). Filtering joins keep only certain observations in one dataset (like filter()), not based on rules related to any variables in the dataset, but on the observations that exist in another dataset. This is useful when we merely care about the membership or non-membership of an observation in the other dataset, not the raw data itself.

### Example 5

In our example data, suppose enrollments_1 only included courses being taught in the Theater building:

```{r}
students_1 |> 
  semi_join(enrollments_1)
```

What did this do? What info would it give us?

*The semi_join() kept only the rows from students_1 where there was a match in enrollments_1 on the class variable. It returns only the columns from students_1, not adding any columns from enrollments_1. This would give us the list of students who are taking classes in the Theater building.*

How does semi_join() differ from inner_join()?

*semi_join() only keeps columns from the left table, while inner_join() keeps columns from both tables.*

What, if anything, would change if we reversed the order of the data tables? Think about it, then try.

```{r}
enrollments_1 |> 
  semi_join(students_1)
```

*If we reverse the order, we get the courses in enrollments_1 that have a student in students_1. "ART 101" is dropped because no student in students_1 is taking it.*

### Example 6

Let's try another filtering join for our example data:

```{r}
students_1 |> 
  anti_join(enrollments_1)
```

What did this do? What info would it give us?

*The anti_join() kept only the rows from students_1 where there was NO match in enrollments_1. In this case, it's just "ANTH 101". This would give us the list of students taking classes not in the Theater building.*

What, if anything, would change if we reversed the order of the data tables? Think about it, then try.

```{r}
enrollments_1 |> 
  anti_join(students_1)
```

*If we reverse the order, we get courses in enrollments_1 that don't have any student in students_1. Only "ART 101" falls into this category.*

### 11.4.1 Summary

Filtering joins keep specific observations from the left table based on whether they match an observation in the right table.

**semi_join()** Discards any observations in the left table that do not have a match in the right table. If there are multiple matches of right cases to a left case, it keeps just one copy of the left case.

**anti_join()** Discards any observations in the left table that do have a match in the right table.

## 11.5 Summary of All Joins

-   left_join(): Keep all rows from left table, add columns from right where matches exist (NA otherwise)
-   inner_join(): Keep only rows where matches exist between both tables
-   full_join(): Keep all rows from both tables, filling with NA where needed
-   semi_join(): Keep rows from left table where matches exist in right table, but don't add columns
-   anti_join(): Keep rows from left table where matches DON'T exist in right table

## 11.6 Exercises

### Exercise 1: Where are my keys?

#### Part a

Define two new datasets, with different students and courses:

```{r}
students_2 <- data.frame(
  student = c("D", "E", "F"),
  class = c("COMP 101", "BIOL 101", "POLI 101")
)

# Check it out
students_2
```

```{r}
enrollments_2 <- data.frame(
  course = c("ART 101", "BIOL 101", "COMP 101"),
  enrollment = c(18, 20, 19)
)

# Check it out
enrollments_2
```

To connect the course enrollments to the students' courses, try do a left_join(). You get an error! Identify the problem by reviewing the error message and the datasets we're trying to join.

```{r, error=TRUE}
# This will produce an error
students_2 |> 
  left_join(enrollments_2)
```

*The problem is that the column names for the course information are different between the two datasets: "class" in students_2 and "course" in enrollments_2. We need to specify which columns to join on.*

#### Part b

The problem is that course name, the key or variable that links these two datasets, is labeled differently: class in the students_2 data and course in the enrollments_2 data. Thus we have to specify these keys in our code:

```{r}
students_2 |> 
  left_join(enrollments_2, join_by(class == course))
```

```{r, error=TRUE}
# The order of the keys is important:
# join_by("left data key" == "right data key")
# The order is mixed up here, thus we get an error:
students_2 |> 
  left_join(enrollments_2, join_by(course == class))
```

#### Part c

Define another set of fake data which adds grade information:

```{r}
# Add student grades in each course
students_3 <- data.frame(
  student = c("Y", "Y", "Z", "Z"),
  class = c("COMP 101", "BIOL 101", "POLI 101", "COMP 101"),
  grade = c("B", "S", "C", "A")
)

# Check it out
students_3
```

```{r}
# Add average grades in each course
enrollments_3 <- data.frame(
  class = c("ART 101", "BIOL 101","COMP 101"),
  grade = c("B", "A", "A-"),
  enrollment = c(20, 18, 19)
)

# Check it out
enrollments_3
```

Try doing a left_join() to link the students' classes to their enrollment info. Did this work? Try and figure out the culprit by examining the output.

```{r}
students_3 |> 
  left_join(enrollments_3)
```

*The join "worked" in that it ran without error, but none of the enrollment values were matched. The problem is that both datasets have "grade" columns with different meanings, so the join is trying to match on both "class" AND "grade", which doesn't produce any matches.*

#### Part d

The issue here is that our datasets have 2 column names in common: class and grade. BUT grade is measuring 2 different things here: individual student grades in students_3 and average student grades in enrollments_3. Thus it doesn't make sense to try to join the datasets with respect to this variable. We can again solve this by specifying that we want to join the datasets using the class variable as a key.

```{r}
students_3 |> 
  left_join(enrollments_3, join_by(class))
```

What are grade.x and grade.y?

*grade.x is the individual student grade from students_3, and grade.y is the average grade for the course from enrollments_3. The .x and .y suffixes are added automatically to distinguish the columns with the same name from the two different datasets.*

### Exercise 2: More small practice

Before applying these ideas to bigger datasets, let's practice identifying which join is appropriate in different scenarios. Define the following fake data on voters (people who have voted) and contact info for voting age adults (people who could vote):

```{r}
# People who have voted
voters <- data.frame(
  id = c("A", "D", "E", "F", "G"),
  times_voted = c(2, 4, 17, 6, 20)
)

voters
```

```{r}
# Contact info for voting age adults
contact <- data.frame(
  name = c("A", "B", "C", "D"),
  address = c("summit", "grand", "snelling", "fairview"),
  age = c(24, 89, 43, 38)
)

contact
```

Use the appropriate join for each prompt below. In each case, think before you type:

-   What dataset goes on the left?
-   What do you want the resulting dataset to look like? How many rows and columns will it have?

```{r}
# 1. We want contact info for people who HAVEN'T voted
contact |>
  anti_join(voters, join_by(name == id))
```

```{r}
# 2. We want contact info for people who HAVE voted
contact |>
  semi_join(voters, join_by(name == id))
```

```{r}
# 3. We want any data available on each person
contact |>
  full_join(voters, join_by(name == id))
```

```{r}
# 4. When possible, we want to add contact info to the voting roster
voters |>
  left_join(contact, join_by(id == name))
```

### Exercise 3: Bigger datasets

Let's apply these ideas to some bigger datasets. In grades, each row is a student-class pair with information on:

-   sid = student ID
-   grade = student's grade
-   sessionID = an identifier of the class section

```{r}
# Get rid of some duplicate rows!
grades <- read.csv("https://mac-stat.github.io/data/grades.csv") |> 
  distinct(sid, sessionID, .keep_all = TRUE)
head(grades)
```

In courses, each row corresponds to a class section with information on:

-   sessionID = an identifier of the class section
-   dept = department
-   level = course level (eg: 100)
-   sem = semester
-   enroll = enrollment (number of students)
-   iid = instructor ID

```{r}
courses <- read.csv("https://mac-stat.github.io/data/courses.csv")
head(courses)
```

Use R code to take a quick glance at the data.

```{r}
# How many observations (rows) and variables (columns) are there in the grades data?
dim(grades)
```

```{r}
# How many observations (rows) and variables (columns) are there in the courses data?
dim(courses)
```

### Exercise 4: Class size

How big are the classes?

#### Part a

Before digging in, note that some courses are listed twice in the courses data:

```{r}
courses |> 
  count(sessionID) |> 
  filter(n > 1)
```

If we pick out just 1 of these, we learn that some courses are cross-listed in multiple departments:

```{r}
courses |> 
  filter(sessionID == "session2047")
```

For our class size exploration, obtain the total enrollments in each sessionID, combining any cross-listed sections. Save this as courses_combined. NOTE: There's no joining to do here!

```{r}
courses_combined <- courses |> 
  group_by(sessionID) |> 
  summarize(enroll = sum(enroll))

# Check that this has 1695 rows and 2 columns
dim(courses_combined)
```

#### Part b

Let's first examine the question of class size from the administration's viewpoint. To this end, calculate the median class size across all class sections. (The median is the middle or 50th percentile. Unlike the mean, it's not skewed by outliers.)

```{r}
# For this we only need courses_combined
courses_combined |>
  summarize(median_class_size = median(enroll))
```

#### Part c

But how big are classes from the student perspective? To this end, calculate the median class size for each individual student. Once you have the correct output, store it as student_class_size.

```{r}
# For this we need to join the grades and courses_combined datasets
student_class_size <- grades |>
  left_join(courses_combined, by = "sessionID") |>
  group_by(sid) |>
  summarize(median_class_size = median(enroll))

head(student_class_size)
```

#### Part d

The median class size varies from student to student. To get a sense for the typical student experience and range in student experiences, construct and discuss a histogram of the median class sizes experienced by the students.

```{r}
ggplot(student_class_size, aes(x = median_class_size)) + 
  geom_histogram(binwidth = 2, fill = "steelblue", color = "white") +
  labs(title = "Distribution of Median Class Sizes Experienced by Students",
       x = "Median Class Size",
       y = "Number of Students") +
  theme_minimal()
```

*This histogram shows the distribution of median class sizes experienced by individual students. Most students experience median class sizes between 15 and 30 students, with the peak around 22-24 students. Very few students have median class sizes below 10 or above 40. The distribution is somewhat right-skewed, suggesting a few students tend to take unusually large classes.*

### Exercise 5: Narrowing in on classes

#### Part a

Show data on the students that enrolled in session1986. THINK FIRST: Which of the 2 datasets do you need to answer this question? One? Both?

```{r}
# We need to filter the grades dataset by sessionID
grades |>
  filter(sessionID == "session1986")
```

#### Part b

Below is a dataset with all courses in department E:

```{r}
dept_E <- courses |> 
  filter(dept == "E")
```

What students enrolled in classes in department E? (We just want info on the students, not the classes.)

```{r}
# We need to do a semi_join to find students in the grades table
# who took courses in the dept_E table
grades |>
  semi_join(dept_E, by = "sessionID") |>
  distinct(sid)
```

### Exercise 6: All the wrangling

Use all of your wrangling skills to answer the following prompts!

You'll need an extra table to convert grades to grade point averages:

```{r}
gpa_conversion <- tibble(
  grade = c("A+", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "NC", "AU", "S"), 
  gp = c(4.3, 4, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0, NA, NA)
)

gpa_conversion
```

#### Part a

How many total student enrollments are there in each department? Order from high to low.

```{r}
# Join grades with courses to get department info, then count
grades |>
  left_join(courses, by = "sessionID") |>
  count(dept) |>
  arrange(desc(n))
```

#### Part b

What's the grade-point average (GPA) for each student?

```{r}
# Join grades with gpa_conversion, then calculate each student's average
grades |>
  left_join(gpa_conversion, by = "grade") |>
  group_by(sid) |>
  summarize(gpa = mean(gp, na.rm = TRUE)) |>
  arrange(desc(gpa)) |>
  head()
```

#### Part c

What's the median GPA across all students?

```{r}
# Calculate each student's GPA, then find the median
grades |>
  left_join(gpa_conversion, by = "grade") |>
  group_by(sid) |>
  summarize(gpa = mean(gp, na.rm = TRUE)) |>
  summarize(median_gpa = median(gpa, na.rm = TRUE))
```

#### Part d

What fraction of grades are below B+?

```{r}
# Join grades with gpa_conversion, then calculate proportion
grades |>
  left_join(gpa_conversion, by = "grade") |>
  filter(!is.na(gp)) |>  # Remove NA grades (AU, S)
  summarize(
    total_grades = n(),
    below_b_plus = sum(gp < 3.3),
    fraction = below_b_plus / total_grades
  )
```

#### Part e

What's the grade-point average for each instructor? Order from low to high.

```{r}
# Join grades with courses to get instructor info, then join with gpa_conversion
grades |>
  left_join(courses, by = "sessionID") |>
  left_join(gpa_conversion, by = "grade") |>
  group_by(iid) |>
  summarize(avg_gp = mean(gp, na.rm = TRUE), n_grades = n()) |>
  filter(n_grades >= 10) |>  # Only include instructors with at least 10 grades
  arrange(avg_gp) |>
  head(10)
```

#### Part f

CHALLENGE: Estimate the grade-point average for each department, and sort from low to high. NOTE: Don't include cross-listed courses. Students in cross-listed courses could be enrolled under either department, and we do not know which department to assign the grade to.

```{r}
# First identify non-cross-listed courses
non_cross_listed <- courses |>
  count(sessionID) |>
  filter(n == 1) |>
  pull(sessionID)

# Then calculate GPA by department for only these courses
grades |>
  filter(sessionID %in% non_cross_listed) |>
  left_join(courses, by = "sessionID") |>
  left_join(gpa_conversion, by = "grade") |>
  group_by(dept) |>
  summarize(
    dept_gpa = mean(gp, na.rm = TRUE),
    n_grades = sum(!is.na(gp))
  ) |>
  filter(n_grades >= 30) |>  # Only include departments with sufficient data
  arrange(dept_gpa)
```
