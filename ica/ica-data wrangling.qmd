---
title: "Data Wrangling"
format: html
---

## Learning Goals

Explore the following wrangling verbs: select, mutate, filter, arrange, summarize, group_by Use the native pipe operator \|\>

## Additional Resources

For more information about the topics covered in this chapter, refer to the resources below:

-   [Intro to dplyr (YouTube)](https://www.youtube.com/watch?v=3JiwESZ1DgQ) by Lisa Lendway
-   [Demonstration of dplyr (YouTube)](https://www.youtube.com/watch?v=HwZLXX2WXKI) by Lisa Lendway
-   [Data Transformation (html)](https://r4ds.had.co.nz/transform.html) by Wickham, Çetinkaya-Rundel, & Grolemund
-   [A Grammar for Data Wrangling (html)](https://mdsr-book.github.io/mdsr2e/ch-wrangling.html) by Baumer, Kaplan, and Horton

## 8.1 Motivation

Recall the elections data by U.S. county:

```{r}
# Load tidyverse & data
library(tidyverse)
elections <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| class-output: "fold-hide"
# Add a hidden chunk to check the structure and get a better understanding of the data
glimpse(elections)
```

::: {.callout-note collapse="true"}
## Click to explore the full elections dataset

Let's examine the structure and the first few rows of our election data:

```{r}
#| echo: true
glimpse(elections)
head(elections)

# Show column names for easier reference
colnames(elections)
```
:::

We've used data viz to explore some general patterns in the election outcomes.
For example, a map!

```{r}
# Get a background map
library(socviz)
data(county_map)

# Make a choropleth map
library(RColorBrewer)  # For the color scale
library(ggthemes) # For theme_map
elections |> 
  mutate(county_fips = as.character(county_fips)) |> 
  mutate(county_fips = 
           ifelse(nchar(county_fips) == 4, paste0("0", county_fips), county_fips)) |> 
  ggplot(aes(map_id = county_fips, fill = cut(repub_pct_20, breaks = seq(0, 100, by = 10)))) +
    geom_map(map = county_map) +
    scale_fill_manual(values = rev(brewer.pal(10, "RdBu")), name = "% Republican") +
    expand_limits(x = county_map$long, y = county_map$lat)  + 
    theme_map() +
    theme(legend.position = "right") + 
    coord_equal()
```

Consider some fairly basic follow-up questions, each of which we cannot answer precisely (or sometimes even at all) using our data viz tools:

-   How many total people voted for the Democratic and Republican candidates in 2020?
-   What about in each state?
-   In just the state of Minnesota:
    -   Which counties had the highest and lowest Democratic vote in 2020?
    -   How did the Democratic vote in each county change from 2016 to 2020?

## 8.2 Goals

We really cannot do anything with data (viz, modeling, etc) unless we can wrangle the data.
The following is a typical quote.
I agree with the 90% – data wrangling isn't something we have to do before we can do data science, it is data science!
But let's rethink the 10% – data wrangling is a fun and empowering puzzle!

The goals of data wrangling are to explore how to:

-   Get data into the tidy shape / format we need for analysis. For example, we might want to:
    -   keep only certain observations
    -   define new variables
    -   reformat or "clean" existing variables
    -   combine various datasets
    -   process "string" or text data
-   Numerically (not just visually) explore and summarize various characteristics of the variables in our dataset.

## 8.3 Tools

We'll continue to use packages that are part of the tidyverse which share a common general grammar and structure.

## 8.4 Review

There are lots and lots of steps that can go into data wrangling, thus lots and lots of relevant R functions.
BUT just 6 functions can get us very far.
People refer to these as the 6 main wrangling verbs or functions:

-   why "verbs"? in the tidyverse grammar, functions serve as action words
-   the 6 verbs are all stored in the dplyr package within the tidyverse
-   each verb acts on a data frame and returns a data frame

| verb      | action                                    |
|-----------|-------------------------------------------|
| arrange   | arrange the rows according to some column |
| filter    | filter out or obtain a subset of the rows |
| select    | select a subset of columns                |
| mutate    | mutate or create a column                 |
| summarize | calculate a numerical summary of a column |
| group_by  | group the rows by a specified column      |

### Example 1

Which verb would help us…

-   keep only information about state names, county names, and the 2020 and 2016 Democratic support (not the 2012 results, demographics, etc)

-   get only the data on Minnesota

-   define a new variable which calculates the change in Democratic support from 2016 to 2020, using dem_pct_20 and dem_pct_16

-   sort the counties from highest to lowest Democratic support

-   determine the total number of votes cast across all counties

### Example 2: Select Columns

To get a sense for the code structure, let's explore a couple verbs together.
To start, let's simplify our dataset to include only some variables of interest.
Specifically, select() only the columns relevant to state names, county names, and the 2020 and 2016 Democratic support:

```{r}
# What's the first argument? The second?
selected_data <- select(elections, c(state_name, county_name, dem_pct_20, dem_pct_16))
```

::: {.callout-note collapse="true"}
## Click to view the selected data

```{r}
head(selected_data, 10)
```
:::

Let's re-do this with the pipe function \|\>:

```{r}
selected_data_pipe <- elections |> 
  select(state_name, county_name, dem_pct_20, dem_pct_16)
```

::: {.callout-note collapse="true"}
## Click to confirm pipe results match

```{r}
# Verify the results are the same
identical(selected_data, selected_data_pipe)
head(selected_data_pipe, 10)
```
:::

### Pipe Function \|\>

\|\> "passes" objects, usually datasets, to a function:

-   object \|\> function() is the same as function(object)

### Example 3: Filter Rows

Let's filter() out only the rows related to Minnesota (MN):

```{r}
# Without a pipe
mn_data <- filter(elections, state_name == "Minnesota")
```

::: {.callout-note collapse="true"}
## Click to view the Minnesota data

```{r}
# Look at the first few rows of Minnesota data
head(mn_data)

# How many counties are in Minnesota?
nrow(mn_data)
```
:::

```{r}
# With a pipe
mn_data_pipe <- elections |> 
  filter(state_name == "Minnesota")
```

### == vs =

We use a == b to check whether a matches b.

We use a = b to define that a is equal to b.
We typically use = for this purpose inside a function, and \<- for this purpose outside a function.

```{r}
# Ex: "=" defines x
x = 2
x
```

```{r}
# Ex: "==" checks whether x is/matches 3
x == 3
```

### Example 4: Filter and Select

Let's combine select() and filter() to create a new dataset with info about the county names, and 2020 and 2016 Democratic support among Minnesota counties.

```{r}
# Without pipes
mn_selected_nopipe <- filter(select(elections, c(state_name, county_name, dem_pct_20, dem_pct_16)), state_name == "Minnesota")
```

::: {.callout-note collapse="true"}
## Click to view Minnesota selected data (without pipes)

```{r}
head(mn_selected_nopipe)
```
:::

```{r}
# With pipes: all verbs in 1 row
mn_selected_oneline <- elections |> select(state_name, county_name, dem_pct_20, dem_pct_16) |> filter(state_name == "Minnesota")
```

```{r}
# With pipes: each verb in a new row
mn_selected <- elections |> 
  select(state_name, county_name, dem_pct_20, dem_pct_16) |> 
  filter(state_name == "Minnesota")
```

::: {.callout-note collapse="true"}
## Click to view Minnesota selected data (with pipes)

```{r}
head(mn_selected)
```
:::

```{r}
# We can even do this with UN-tidyverse code in "base" R
mn_selected_base <- elections[elections$state_name == "Minnesota", c(1, 4, 8, 12)]
```

### Reflection

Why will we typically use:

-   tidyverse code
-   the pipe function \|\>
-   each verb on a new row

### Example 5: Order of Operations

Sometimes, the order of operations matters, eg, putting on socks then shoes produces a different result than putting on shoes then socks.
However, sometimes order doesn't matter, eg, pouring cereal into a bowl then adding milk produces the same result as pouring milk into a bow then adding cereal (though one order is obviously better than the other ;)) Above (also copied below), we selected some columns and then filtered some rows:

```{r}
elections |> 
  select(state_name, county_name, dem_pct_20, dem_pct_16) |> 
  filter(state_name == "Minnesota")
```

Would we get the same result if we reversed select() and filter()?
Think first, then try it.

```{r}
# Try it
reverse_order <- elections |> 
  filter(state_name == "Minnesota") |>
  select(state_name, county_name, dem_pct_20, dem_pct_16)
```

::: {.callout-note collapse="true"}
## Click to compare the results of different operation orders

```{r}
# Check if both approaches give the same result
identical(mn_selected, reverse_order)

# View the first few rows
head(reverse_order)
```
:::

### Example 6: Storing Results

Typically:

-   We want to store our data wrangling results.
-   It's good practice to do so under a new name. We want to preserve, thus don't want to overwrite, the original data (especially if our code contains errors!!).

```{r}
# Store the results
mn <- elections |> 
  select(state_name, county_name, dem_pct_20, dem_pct_16) |> 
  filter(state_name == "Minnesota")

# Always check it out to confirm it's what you want it to be!
head(mn)
```

```{r}
nrow(mn)
```

```{r}
nrow(elections)
```

## 8.5 Exercises

### Exercise 1: select Practice

Use select() to create a simplified dataset that we'll use throughout the exercises below.

-   Store this dataset as elections_small.
-   Only keep the following variables: state_name, county_name, total_votes_20, repub_pct_20, dem_pct_20, total_votes_16, dem_pct_16

```{r}
# Define elections_small
elections_small <- elections |>
  select(state_name, county_name, total_votes_20, repub_pct_20, dem_pct_20, total_votes_16, dem_pct_16)

# Check out the first 6 rows to confirm your code did what you think it did!
head(elections_small)
```

### Exercise 2: filter Demo

Whereas select() selects certain variables or columns, filter() keeps certain units of observation or rows relative to their outcome on certain variables.
To this end, we must:

1.  Identify the variable(s) that are relevant to the filter.

2.  Use a "logical comparison operator" to define which values of the variable to keep:

| symbol           | meaning                   |
|------------------|---------------------------|
| ==               | equal to                  |
| !=               | not equal to              |
| \>               | greater than              |
| \>=              | greater than or equal to  |
| \<               | less than                 |
| \<=              | less than or equal to     |
| %in% c(???, ???) | a list of multiple values |

3.  Use quotes "" when specifying outcomes of interest for a categorical variable.

```{r}
# Keep only data on counties in Hawaii
hawaii_counties <- elections_small |>
 filter(state_name == "Hawaii")
```

::: {.callout-note collapse="true"}
## Click to view Hawaii counties

```{r}
# View all Hawaii counties
hawaii_counties
```
:::

```{r}
# What does this do?
hawaii_delaware <- elections_small |> 
  filter(state_name %in% c("Hawaii", "Delaware"))
```

::: {.callout-note collapse="true"}
## Click to view Hawaii and Delaware counties

```{r}
# View all Hawaii and Delaware counties
hawaii_delaware
```
:::

```{r}
# Keep only data on counties where the Republican got MORE THAN 93.97% of the vote in 2020
# THINK: What variable is relevant here?
high_repub <- elections_small |>
  filter(repub_pct_20 > 93.97)
```

::: {.callout-note collapse="true"}
## Click to view counties with \>93.97% Republican vote

```{r}
# Which counties had >93.97% Republican vote?
high_repub
```
:::

```{r}
# Keep only data on counties where the Republican got AT LEAST 93.97% of the vote in 2020
# This should have 1 more row (observation) than your answer above
high_repub_inclusive <- elections_small |>
  filter(repub_pct_20 >= 93.97)
```

::: {.callout-note collapse="true"}
## Click to view counties with ≥93.97% Republican vote

```{r}
# Which counties had ≥93.97% Republican vote?
high_repub_inclusive

# Check that we have one more row than the previous filter
nrow(high_repub_inclusive) - nrow(high_repub)
```
:::

We can also filter with respect to 2 rules!
Here, think what variables are relevant.

```{r}
# Keep only data on counties in Texas where the Democrat got more than 65% of the vote in 2020
# Do this 2 ways.
# Method 1: 2 filters with 1 condition each
texas_dem_method1 <- elections_small |> 
  filter(state_name == "Texas") |> 
  filter(dem_pct_20 > 65)
```

::: {.callout-note collapse="true"}
## Click to view Texas counties with \>65% Democratic vote (Method 1)

```{r}
texas_dem_method1
```
:::

```{r}
# Method 2: 1 filter with 2 conditions
texas_dem_method2 <- elections_small |> 
  filter(state_name == "Texas", dem_pct_20 > 65)
```

::: {.callout-note collapse="true"}
## Click to view Texas counties with \>65% Democratic vote (Method 2)

```{r}
# Check if both methods give the same result
texas_dem_method2
identical(texas_dem_method1, texas_dem_method2)
```
:::

### Exercise 3: arrange Demo

arrange() arranges or sorts the rows in a dataset according to a given column or variable, in ascending or descending order:

arrange(variable), arrange(desc(variable))

```{r}
# Arrange the counties in elections_small from lowest to highest percentage of 2020 Republican support
# Print out just the first 6 rows
elections_small |> 
  arrange(repub_pct_20) |> 
  head()
```

```{r}
# Arrange the counties in elections_small from highest to lowest percentage of 2020 Republican support
# Print out just the first 6 rows
elections_small |> 
  arrange(desc(repub_pct_20)) |> 
  head()
```

### Exercise 4: mutate Demo

mutate() can either transform / mutate an existing variable (column), or define a new variable based on existing ones.

#### Part a

```{r}
# What did this code do?
example_diff <- elections_small |> 
  mutate(diff_20 = repub_pct_20 - dem_pct_20) |> 
  head()
```

::: {.callout-note collapse="true"}
## Click to view the difference calculation result

```{r}
# View the result with the newly calculated difference column
example_diff
```

This code calculated the difference between the Republican and Democratic vote percentages in 2020 for each county.
:::

```{r}
# What did this code do?
example_votes <- elections_small |> 
  mutate(repub_votes_20 = round(total_votes_20 * repub_pct_20/100)) |> 
  head()
```

::: {.callout-note collapse="true"}
## Click to view the Republican votes calculation

```{r}
# View the result with the newly calculated Republican votes
example_votes
```

This code calculated the actual number of Republican votes in 2020 for each county by multiplying the total votes by the Republican percentage and dividing by 100.
:::

```{r}
# What did this code do?
example_win <- elections_small |> 
  mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |> 
  head()
```

::: {.callout-note collapse="true"}
## Click to view the Republican win indicator

```{r}
# View the result with the newly calculated win indicator
example_win
```

This code created a TRUE/FALSE indicator showing whether Republicans won each county (TRUE if the Republican percentage was greater than the Democratic percentage).
:::

#### Part b

```{r}
# You try
# Define a variable that calculates the change in Dem support in 2020 vs 2016
dem_change <- elections_small |> 
  mutate(dem_change = dem_pct_20 - dem_pct_16) |> 
  head()
```

::: {.callout-note collapse="true"}
## Click to view the Democratic change calculation

```{r}
# View the result with the Democratic change column
dem_change
```
:::

```{r}
# You try
# Define a variable that determines whether the Dem support was higher in 2020 than in 2016 (TRUE/FALSE)
dem_improved <- elections_small |> 
  mutate(dem_improved = dem_pct_20 > dem_pct_16) |> 
  head()
```

::: {.callout-note collapse="true"}
## Click to view the Democratic improvement indicator

```{r}
# View the result with the Democratic improvement indicator
dem_improved
```
:::

### Exercise 5: Pipe Series

Let's now combine these verbs into a pipe series!

#### Part a

Think then Run BEFORE running the below chunk, what do you think it will produce?

```{r}
wi_dem_counties <- elections_small |> 
  filter(state_name == "Wisconsin",
         repub_pct_20 < dem_pct_20) |> 
  arrange(desc(total_votes_20)) |> 
  head()
```

::: {.callout-note collapse="true"}
## Click to examine the Wisconsin Democratic counties

```{r}
# This code found Wisconsin counties where Democrats won in 2020,
# then sorted them by total votes (largest first)
wi_dem_counties
```
:::

#### Part b

Think then Run BEFORE trying, what do you think will happen if you change the order of filter and arrange:

-   the results will be the same
-   we'll get an error
-   we won't get an error, but the results will be different

```{r}
# Now try it. Change the order of filter and arrange below.
wi_dem_counties_reordered <- elections_small |> 
  arrange(desc(total_votes_20)) |>
  filter(state_name == "Wisconsin",
         repub_pct_20 < dem_pct_20) |> 
  head()
```

::: {.callout-note collapse="true"}
## Click to compare the results of different operation orders

```{r}
# Are the results the same when we change the order?
identical(wi_dem_counties, wi_dem_counties_reordered)

# View the reordered result
wi_dem_counties_reordered
```
:::

#### Part c

So the order of filter() and arrange() did not matter – rerranging them produces the same results.
BUT what is one advantage of filtering before arranging?

*Answer: Filtering before arranging is more efficient because the computer only has to sort the filtered data (which is smaller) rather than arranging all the data and then filtering it.*

#### Part d

Think then Run BEFORE running the below chunk, what do you think it will produce?

```{r}
delaware_repub_win <- elections_small |> 
  filter(state_name == "Delaware") |> 
  mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |> 
  select(county_name, repub_pct_20, dem_pct_20, repub_win_20)
```

::: {.callout-note collapse="true"}
## Click to examine the Delaware Republican win analysis

```{r}
# This shows Delaware counties with Republican and Democratic percentages
# and indicates whether Republicans won each county
delaware_repub_win
```
:::

#### Part e

Think then Run BEFORE trying, what do you think will happen if you change the order of mutate and select:

-   the results will be the same
-   we'll get an error
-   we won't get an error, but the results will be different

```{r}
# Now try it. Change the order of mutate and select below.
delaware_repub_win_reordered <- elections_small |> 
  filter(state_name == "Delaware") |> 
  select(county_name, repub_pct_20, dem_pct_20) |>
  mutate(repub_win_20 = repub_pct_20 > dem_pct_20)
```

::: {.callout-note collapse="true"}
## Click to compare the results with different mutate/select order

```{r}
# View the reordered result
delaware_repub_win_reordered

# Are the results the same?
identical(delaware_repub_win, delaware_repub_win_reordered)
```
:::

### Exercise 6: DIY Pipe Series

We've now learned 4 of the 6 wrangling verbs: select, filter, mutate, arrange.
Let's practice combining these into pipe series.
Here are some hot tips:

-   Before writing any code, translate the prompt: how many distinct wrangling steps are needed and what verb do we need in each step?
-   Add each verb one at a time – don't try writing a whole chunk at once.

#### Part a

Show just the counties in Minnesota and their Democratic 2020 vote percentage, from highest to lowest.
Your answer should have just 2 columns.

```{r}
mn_dem_sorted <- elections_small |>
  filter(state_name == "Minnesota") |>
  select(county_name, dem_pct_20) |>
  arrange(desc(dem_pct_20))
```

::: {.callout-note collapse="true"}
## Click to view Minnesota counties sorted by Democratic vote

```{r}
# Minnesota counties sorted by Democratic vote percentage (highest to lowest)
mn_dem_sorted
```
:::

#### Part b

Create a new dataset named mn_wi that sorts the counties in Minnesota and Wisconsin from lowest to highest in terms of the change in Democratic vote percentage in 2020 vs 2016.
This dataset should include the following variables (and only these variables): state_name, county_name, dem_pct_20, dem_pct_16, and a variable measuring the change in Democratic vote percentage in 2020 vs 2016.

```{r}
# Define the dataset
# Only store the results once you're confident that they're correct
mn_wi <- elections_small |>
  filter(state_name %in% c("Minnesota", "Wisconsin")) |>
  mutate(dem_change = dem_pct_20 - dem_pct_16) |>
  select(state_name, county_name, dem_pct_20, dem_pct_16, dem_change) |>
  arrange(dem_change)

# Check out the first 6 rows to confirm your results
head(mn_wi)
```

::: {.callout-note collapse="true"}
## Click to explore the full MN/WI dataset

```{r}
# How many counties are in our dataset?
nrow(mn_wi)

# How many from each state?
table(mn_wi$state_name)

# Show more rows of the dataset
head(mn_wi, 10)

# Show the counties with the largest Democratic gains
tail(mn_wi, 10)
```
:::

#### Part c

Construct and discuss a plot of the county-level change in Democratic vote percent in 2020 vs 2016, and how this differs between Minnesota and Wisconsin.

```{r}
ggplot(mn_wi, aes(x = dem_change, fill = state_name)) +
  geom_histogram(position = "dodge", alpha = 0.7, bins = 20) +
  labs(title = "Change in Democratic Vote Percentage (2020 vs 2016)",
       subtitle = "Minnesota vs Wisconsin Counties",
       x = "Change in Democratic Vote % (2020 - 2016)",
       y = "Number of Counties",
       fill = "State") +
  theme_minimal()
```

```{r}
# Another visualization option: boxplot
ggplot(mn_wi, aes(x = state_name, y = dem_change, fill = state_name)) +
  geom_boxplot() +
  labs(title = "Change in Democratic Vote Percentage (2020 vs 2016)",
       subtitle = "Minnesota vs Wisconsin Counties",
       x = "State",
       y = "Change in Democratic Vote % (2020 - 2016)") +
  theme_minimal()
```

### Exercise 7: summarize Demo

6 verbs: select, filter, arrange, mutate, summarize, group_by

Let's talk about the last 2 verbs.
summarize() (or equivalently summarise()) takes an entire data frame as input and outputs a single row with one or more summary statistics.
For each chunk below, indicate what the code does.

```{r}
# What does this do?
median_repub_simple <- elections_small |> 
  summarize(median(repub_pct_20))
```

::: {.callout-note collapse="true"}
## Click to view the simple median calculation

```{r}
# This calculates the median Republican vote percentage across all counties
median_repub_simple
```
:::

```{r}
# What does this do?
median_repub_named <- elections_small |> 
  summarize(median_repub = median(repub_pct_20))
```

::: {.callout-note collapse="true"}
## Click to view the named median calculation

```{r}
# This calculates the median Republican vote percentage but gives the result column a name
median_repub_named
```
:::

```{r}
# What does this do?
election_summary <- elections_small |> 
  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))
```

::: {.callout-note collapse="true"}
## Click to view the multiple summary statistics

```{r}
# This calculates both the median Republican vote percentage and the total votes across all counties
election_summary
```
:::

### Exercise 8: summarize + group_by demo

Finally, group_by() groups the units of observation or rows of a data frame by a specified set of variables.
Alone, this function doesn't change the appearance of our dataset or seem to do anything at all:

```{r}
elections_grouped <- elections_small |> 
  group_by(state_name)
```

::: {.callout-note collapse="true"}
## Click to view the grouped data (looks the same, but structure is different)

```{r}
# The data looks the same, but the structure is different
head(elections_grouped)
```
:::

Though it does change the underlying structure of the dataset:

```{r}
# Check out the structure before and after group_by
elections_small |> 
  class()

elections_small |> 
  group_by(state_name) |> 
  class()
```

Where it really shines is in partnership with summarize().

```{r}
# What does this do?
# (What if we didn't use group_by?)
state_summaries <- elections_small |> 
  group_by(state_name) |> 
  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))
```

::: {.callout-note collapse="true"}
## Click to view the grouped summary statistics

```{r}
# This calculates the median Republican percentage and total votes for each state
head(state_summaries, 10)

# How many states do we have?
nrow(state_summaries)
```
:::

#### Reflect

Notice that group_by() with summarize() produces new data frame or tibble!
But the units of observation are now states instead of counties within states.

### Exercise 9: DIY

Let's practice (some of) our 6 verbs: select, filter, arrange, mutate, summarize, group_by Remember:

-   Before writing any code, translate the given prompts: how many distinct wrangling steps are needed and what verb do we need in each step?
-   Add each verb one at a time.

#### Part a

NOTE: Part a is a challenge exercise.
If you get really stuck, move on to Part b which is the same overall question, but with hints.

```{r}
# Sort the *states* from the most to least total votes cast in 2020
state_votes <- elections_small |>
  group_by(state_name) |>
  summarize(total_state_votes = sum(total_votes_20)) |>
  arrange(desc(total_state_votes))
```

::: {.callout-note collapse="true"}
## Click to view states sorted by total votes

```{r}
# States sorted by total votes (highest to lowest)
state_votes
```
:::

```{r}
# In 2020, what were the total number of votes for the Democratic candidate and the total number of votes for the Republican candidate in each *state*?
state_party_votes <- elections_small |>
  mutate(dem_votes_20 = total_votes_20 * dem_pct_20/100,
         repub_votes_20 = total_votes_20 * repub_pct_20/100) |>
  group_by(state_name) |>
  summarize(total_dem_votes = sum(dem_votes_20),
            total_repub_votes = sum(repub_votes_20))
```

::: {.callout-note collapse="true"}
## Click to view Democratic and Republican votes by state

```{r}
# View Democratic and Republican votes by state
head(state_party_votes, 10)

# Check total votes
state_party_votes |>
  summarize(total_dem = sum(total_dem_votes),
            total_repub = sum(total_repub_votes),
            difference = sum(total_repub_votes) - sum(total_dem_votes))
```
:::

```{r}
# What states did the Democratic candidate win in 2020?
dem_win_states <- elections_small |>
  mutate(dem_votes_20 = total_votes_20 * dem_pct_20/100,
         repub_votes_20 = total_votes_20 * repub_pct_20/100) |>
  group_by(state_name) |>
  summarize(total_dem_votes = sum(dem_votes_20),
            total_repub_votes = sum(repub_votes_20)) |>
  filter(total_dem_votes > total_repub_votes) |>
  arrange(desc(total_dem_votes))
```

::: {.callout-note collapse="true"}
## Click to view states won by Democrats

```{r}
# States where Democrats won in 2020
dem_win_states

# How many states did Democrats win?
nrow(dem_win_states)
```
:::

#### Part b

```{r}
# Sort the states from the most to least total votes cast in 2020
# HINT: Calculate the total number of votes in each state, then sort
states_by_votes <- elections_small |>
  group_by(state_name) |>
  summarize(total_state_votes = sum(total_votes_20)) |>
  arrange(desc(total_state_votes))
```

::: {.callout-note collapse="true"}
## Click to view states by total votes (with hint)

```{r}
# States sorted by total votes cast
head(states_by_votes, 10)
```
:::

```{r}
# In 2020, what were the total number of votes for the Democratic candidate and the total number of votes for the Republican candidate in each state?
# HINT: First calculate the number of Dem and Repub votes in each *county*
# Then group and summarize these by state
state_party_votes_hint <- elections_small |>
  mutate(dem_votes_20 = total_votes_20 * dem_pct_20/100,
         repub_votes_20 = total_votes_20 * repub_pct_20/100) |>
  group_by(state_name) |>
  summarize(total_dem_votes = sum(dem_votes_20),
            total_repub_votes = sum(repub_votes_20))
```

::: {.callout-note collapse="true"}
## Click to view party votes by state (with hint)

```{r}
# View Democratic and Republican votes by state
head(state_party_votes_hint, 10)
```
:::

```{r}
# What states did the Democratic candidate win in 2020?
# HINT: Start with the results from the previous chunk, and then keep only some rows
dem_win_states_hint <- elections_small |>
  mutate(dem_votes_20 = total_votes_20 * dem_pct_20/100,
         repub_votes_20 = total_votes_20 * repub_pct_20/100) |>
  group_by(state_name) |>
  summarize(total_dem_votes = sum(dem_votes_20),
            total_repub_votes = sum(repub_votes_20)) |>
  filter(total_dem_votes > total_repub_votes)
```

::: {.callout-note collapse="true"}
## Click to view states won by Democrats (with hint)

```{r}
# States where Democrats won in 2020
dem_win_states_hint

# Is this the same as our previous result?
identical(dem_win_states_hint, dem_win_states)
```
:::

### Exercise 10: Practice on New Data

Recall the World Cup football/soccer data from TidyTuesday:

```{r}
world_cup <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv")
```

::: {.callout-note collapse="true"}
## Click to explore the World Cup dataset

```{r}
# Look at the structure
glimpse(world_cup)

# Check out the first few rows
head(world_cup)

# Get a summary of the data
summary(world_cup)
```
:::

You can find a codebook here.
Use (some of) our 6 verbs (select, filter, arrange, mutate, summarize, group_by) and data viz to address the following prompts.

```{r}
# In what years did Brazil win the World Cup?
brazil_wins <- world_cup |>
  filter(winner == "Brazil") |>
  select(year, winner)
```

::: {.callout-note collapse="true"}
## Click to view Brazil's World Cup wins

```{r}
# Years when Brazil won the World Cup
brazil_wins
```
:::

```{r}
# What were the 6 World Cups with the highest attendance?
highest_attendance <- world_cup |>
  arrange(desc(attendance)) |>
  select(year, host, attendance) |>
  head(6)
```

::: {.callout-note collapse="true"}
## Click to view World Cups with highest attendance

```{r}
# World Cups with highest attendance
highest_attendance
```
:::

```{r}
# Construct a univariate plot of goals_scored (no wrangling necessary)
# This provides a visual summary of how the number of goals_scored varies from World Cup to World Cup
ggplot(world_cup, aes(x = goals_scored)) +
  geom_histogram(bins = 10, fill = "steelblue", color = "black") +
  labs(title = "Distribution of Goals Scored in World Cups",
       x = "Goals Scored",
       y = "Count") +
  theme_minimal()
```

```{r}
# Let's follow up the plot with some more precise numerical summaries
# Calculate the min, median, and max number of goals_scored across all World Cups
# NOTE: Visually compare these numerical summaries to what you observed in the plot
goals_summary <- world_cup |>
  summarize(min_goals = min(goals_scored),
            median_goals = median(goals_scored),
            max_goals = max(goals_scored))
```

::: {.callout-note collapse="true"}
## Click to view goals scored summary statistics

```{r}
# Summary statistics for goals scored
goals_summary
```
:::

```{r}
# Construct a bivariate plot of how the number of goals_scored in the World Cup has changed over the years
# No wrangling necessary
ggplot(world_cup, aes(x = year, y = goals_scored)) +
  geom_point() +
  geom_line() +
  labs(title = "Goals Scored in World Cups Over Time",
       x = "Year",
       y = "Goals Scored") +
  theme_minimal()
```

```{r}
# Our above summaries might be a bit misleading.
# The number of games played at the World Cup varies.
# Construct a bivariate plot of how the typical number of goals per game has changed over the years
world_cup |>
  mutate(goals_per_game = goals_scored / games) |>
  ggplot(aes(x = year, y = goals_per_game)) +
  geom_point() +
  geom_line() +
  labs(title = "Average Goals per Game in World Cups Over Time",
       x = "Year",
       y = "Goals per Game") +
  theme_minimal()
```

### Exercise 11: Practice on Your Own Data

Return to the TidyTuesday data you're using in Homework 3.
Use your new wrangling skills to play around.
What new insights can you gain?!

```{r}
#| eval: false
# This is where you would put your own analysis using your Homework 3 dataset
# Example code structure:
# my_data |>
#   filter(...) |>
#   group_by(...) |>
#   summarize(...) |>
#   arrange(...)
```

::: callout-tip
## Summary of Key Data Wrangling Verbs

Here's a quick reference of the verbs we've learned:

1.  **select()** - Choose specific columns
2.  **filter()** - Choose specific rows based on conditions
3.  **arrange()** - Sort rows by values in columns
4.  **mutate()** - Create new columns or modify existing ones
5.  **summarize()** - Calculate summary statistics
6.  **group_by()** - Group rows by values in columns (typically used with summarize)

Remember that you can combine these verbs with the pipe operator `|>` to create powerful data wrangling workflows!
:::
