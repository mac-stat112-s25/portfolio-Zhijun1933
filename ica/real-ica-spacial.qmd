---
title: "Spatial Visualization Analysis"
---

## Initial Setup

```{r setup}
#| message: false
#| warning: false

# Install required packages if not present
if (!require("pacman")) install.packages("pacman")

# Load all required packages
pacman::p_load(
  tidyverse,    # Data manipulation
  leaflet,      # Interactive maps
  gplots,       # Color utilities
  ggthemes,    # Link to theme_map
  rnaturalearth, # Geographic data
  rnaturalearthdata,
  sf,           # Simple features
  maps,         # Map data
  RColorBrewer, # Color palettes
  socviz,       # Social visualization
  viridis       # Color scales
)

# Install rnaturalearthhires if not present
if (!require("rnaturalearthhires")) {
  devtools::install_github("ropensci/rnaturalearthhires")
}

# Set default theme
theme_set(theme_minimal())
```

## Data Loading

```{r data_loading}
#| message: false
#| warning: false

# Load data with error handling
tryCatch({
  fave_places <- read.csv("https://hash-mac.github.io/stat112site-s25/data/our_fave_places.csv")
  starbucks <- read.csv("https://mac-stat.github.io/data/starbucks.csv")
  elections_by_state <- read.csv("https://mac-stat.github.io/data/election_2020_by_state.csv")
  elections_by_counties <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")
}, error = function(e) {
  stop("Error loading data: ", e$message)
})
```

## Exercise 1: Interactive Points with Leaflet

```{r leaflet_basic}
#| message: false
#| warning: false
#| execute: false 
leaflet(data = fave_places) |> 
  addTiles() |> 
  addMarkers() |>
  addControl(html = "Favorite Places Map", position = "topright")

# Enhanced version
leaflet(data = fave_places) |>
  addTiles() |> 
  addCircles(
    weight = 10, 
    opacity = 1, 
    color = col2hex("yellow"),
    popup = ~paste("Location:", longitude, latitude)
  )
```

## Exercise 2: Starbucks Minnesota Analysis

This exercise focuses on visualizing Starbucks locations in Minnesota with interactive popups.

```{r starbucks_mn}
#| message: false

starbucks_mn <- starbucks |> 
  filter(Country == "US", State.Province == "MN") |>
  mutate(
    popup_text = paste(
      "<b>", Store.Name, "</b><br>",
      "Address:", Street.Address, "<br>",
      "City:", City
    )
  )

leaflet(data = starbucks_mn) |>
  addTiles() |>
  addMarkers(popup = ~popup_text) |>
  addControl(html = "Minnesota Starbucks Locations", position = "topright")
```

## Exercise 3: Global Distribution Scatter Plot

A basic coordinate plot shows global Starbucks distribution without map context.

```{r basic_scatter}
#| message: false

ggplot(starbucks, aes(x = Longitude, y = Latitude)) +
  geom_point(alpha = 0.2, size = 0.2) +
  labs(
    title = "Global Starbucks Locations",
    subtitle = "Basic coordinate visualization",
    caption = "Data: Starbucks location database"
  ) +
  theme_minimal()
```

## Exercise 4: World Map with Points

Adding a proper map background improves geographical context.

```{r world_map}
#| message: false

world <- ne_countries(scale = "medium", returnclass = "sf")

ggplot(world) + 
  geom_sf(fill = "whitesmoke", color = "gray40") + 
  geom_point(
    data = starbucks,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3, size = 0.2, 
    color = "darkgreen"
  ) +
  labs(
    title = "Global Distribution of Starbucks Locations",
    subtitle = "Points represent individual stores",
    caption = "Data: Starbucks location database"
  ) +
  theme_map() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12)
  )
```

## Exercise 5: North American Focus

Zooming in on North America provides better regional detail.

```{r north_america}
#| message: false

starbucks_na <- starbucks |> 
  filter(Country %in% c('CA', 'MX', 'US'))

na_states <- ne_states(
  country = c("canada", "mexico", "united states of america"),
  returnclass = "sf"
)

ggplot(na_states) + 
  geom_sf(fill = "whitesmoke", color = "gray40") + 
  geom_point(
    data = starbucks_na,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3, size = 0.2,
    color = "darkgreen"
  ) +
  coord_sf(xlim = c(-179.14, -50)) +
  labs(
    title = "Starbucks in North America",
    subtitle = "Canada, Mexico, and United States",
    caption = "Data: Starbucks location database"
  ) +
  theme_map()
```

## Exercise 6: Midwest Regional Analysis

Focusing on specific states with county boundaries.

```{r midwest}
#| message: false

midwest_boundaries <- st_as_sf(
  maps::map("state",
            region = c("minnesota", "wisconsin", "north dakota", "south dakota"), 
            fill = TRUE, plot = FALSE)
)

starbucks_midwest <- starbucks |> 
  filter(State.Province %in% c("MN", "ND", "SD", "WI"))

ggplot(midwest_boundaries) + 
  geom_sf(fill = "whitesmoke", color = "gray40") + 
  geom_point(
    data = starbucks_midwest,
    aes(x = Longitude, y = Latitude),
    alpha = 0.7, size = 0.2,
    color = 'darkgreen'
  ) + 
  labs(
    title = "Starbucks in Midwest States",
    subtitle = "MN, WI, ND, and SD locations",
    caption = "Data: Starbucks location database"
  ) +
  theme_map()
```

## Exercise 7: Density Contour Analysis

Creating density contours to show concentration patterns.

```{r contours}
#| message: false

ggplot(na_states) + 
  geom_sf() + 
  geom_density_2d(
    data = starbucks_na,
    aes(x = Longitude, y = Latitude),
    size = 0.2,
    color = "darkgreen"
  ) +
  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +
  labs(
    title = "Starbucks Density in North America",
    subtitle = "Contour lines show store concentration",
    caption = "Data: Starbucks location database"
  ) +
  theme_map()
```

## Exercise 8: State-Level Electoral Analysis

Creating a choropleth map of 2020 election results by state.

```{r state_election}
#| message: false
#| fig.width:  12
#| fig.height: 8

elections_by_state <- elections_by_state |>
  filter(state_abbr != "DC") |>
  select(state_name, state_abbr, repub_pct_20) |>
  mutate(
    repub_20_categories = cut(
      repub_pct_20, 
      breaks = seq(30, 70, by = 5), 
      labels = c("30-34", "35-39", "40-44", "45-49",
                "50-54", "55-59", "60-64", "65-70"), 
      include.lowest = TRUE
    )
  )

states_map <- map_data("state")

ggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +
  geom_map(map = states_map) +
  expand_limits(x = states_map$long, y = states_map$lat) +
  scale_fill_manual(
    values = rev(brewer.pal(8, "RdBu")), 
    name = "Republican Vote %"
  ) +
  labs(
    title = "2020 Presidential Election Results",
    subtitle = "Republican vote share by state",
    caption = "Data: Election results database"
  ) +
  theme_map()
```

## Exercise 9: County-Level Analysis

Analyzing demographic patterns at the county level.

```{r county_analysis}
#| message: false
#| fig.width: 12
#| fig.height: 24

elections_by_counties <- elections_by_counties |>
  select(state_name, state_abbr, county_name, county_fips,
         repub_pct_20, median_age, median_rent) |>
  mutate(
    repub_20_categories = cut(
      repub_pct_20, 
      breaks = seq(0, 100, by = 10),
      labels = paste(seq(0, 90, 10), seq(9, 99, 10), sep="-"),
      include.lowest = TRUE
    ),
    county_fips = as.character(county_fips),
    county_fips = ifelse(
      nchar(county_fips) == 4,
      paste0("0", county_fips),
      county_fips
    )
  )

plot_county_choropleth <- function(data, var, title, fill_scale) {
  ggplot(data, aes(map_id = county_fips, fill = {{var}})) +
    geom_map(map = county_map) +
    fill_scale +
    expand_limits(x = county_map$long, y = county_map$lat) +
    labs(title = title) +
    theme_map() +
    theme(legend.position = "right") +
    coord_equal()
}

# Republican vote share
plot_county_choropleth(
  elections_by_counties,
  repub_20_categories,
  "2020 Presidential Election Results by County",
  scale_fill_manual(
    values = rev(brewer.pal(10, "RdBu")), 
    name = "Republican Vote %"
  )
)

# Median rent visualization
plot_county_choropleth(
  elections_by_counties,
  median_rent,
  "Median Rent by County",
  scale_fill_viridis_c(name = "Median Rent ($)")
)

# Median age visualization
plot_county_choropleth(
  elections_by_counties,
  median_age,
  "Median Age by County",
  scale_fill_viridis_c(name = "Median Age (years)")
)
```

## Exercise 10: Interactive Choropleth

```{r interactive_choropleth}
#| message: false
#| warning: false

# Load required shape files
states_sf <- st_as_sf(maps::map("state", plot = FALSE, fill = TRUE))

# Create color palette
pal <- colorNumeric(
  palette = "RdBu",
  domain = elections_by_state$repub_pct_20,
  reverse = TRUE
)

# Create map
leaflet(states_sf) |>
  addTiles() |>
  addProviderTiles("CartoDB.Positron") |>
  addPolygons(
    fillColor = ~pal(elections_by_state$repub_pct_20),
    weight = 2,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 0.7
  ) |>
  addLegend(
    pal = pal,
    values = elections_by_state$repub_pct_20,
    title = "% Republican Vote",
    position = "bottomright"
  )
```
